// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Serve.API.Models;

#nullable disable

namespace Serve.API.Migrations
{
    [DbContext(typeof(ServeDbContext))]
    [Migration("20220727042127_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("Canceled")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.AppointmentHandler", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AppointmentHandler", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.AppointmentProduct", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentProduct", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Serve.API.Models.CollaborativeTool", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ToolName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ToolUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CollaborativeTools");
                });

            modelBuilder.Entity("Serve.API.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short?>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerEmail" }, "AK_EMAIL")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Serve.API.Models.EmployeePermission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmployeePermission", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.EmployeeRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationEmployeeId")
                        .HasColumnType("int");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationEmployeeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("EmployeeRole", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.EmployeeUnavailableDate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeUnavailableDate", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EventUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReminderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TriggeredAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("ReminderId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("EventDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EventName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EventType", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EventId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReminderId")
                        .HasColumnType("int");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ReminderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Serve.API.Models.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AuthenticationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BusinessBio")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BusinessEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("Creator")
                        .HasColumnType("bigint");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WhatsappUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.OrganizationEmployee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RoleId");

                    b.ToTable("OrganizationEmployee", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.OrganizationMedium", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("MediaCaption")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MediaDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MediaName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MediaType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationMedia");
                });

            modelBuilder.Entity("Serve.API.Models.OrganizationUnavailableDate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EnddateTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationUnavailableDate", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10,0)");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ReminderCount")
                        .HasColumnType("int");

                    b.Property<int?>("ReminderInterval")
                        .HasColumnType("int");

                    b.Property<int?>("ReminderStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ReminderType")
                        .HasColumnType("int");

                    b.Property<byte?>("ReminderUnit")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ReminderStatusId");

                    b.HasIndex("ReminderType");

                    b.ToTable("Reminder", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.ReminderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReminderStatus", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.ReminderType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReminderType", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Schedule", b =>
                {
                    b.Property<int>("SchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchId"), 1L, 1);

                    b.Property<DateTime?>("FinishAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("FinishAT")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("StartFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SchId")
                        .HasName("PK__Schedule__CAD9870BAB31DAFB");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("BaseFee")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Duration")
                        .HasColumnType("datetime");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaskDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TaskTittle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.Timesheet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<bool>("ApprovedTimesheet")
                        .HasColumnType("bit");

                    b.Property<string>("AttendanceByDay")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("ShiftEnd")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<DateTime?>("ShiftStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Timesheet", (string)null);
                });

            modelBuilder.Entity("Serve.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AuthType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_AT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Serve.API.Models.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Serve.API.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serve.API.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Serve.API.Models.Appointment", b =>
                {
                    b.HasOne("Serve.API.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Appointme__Clien__300424B4");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Serve.API.Models.AppointmentHandler", b =>
                {
                    b.HasOne("Serve.API.Models.Appointment", "Appointment")
                        .WithMany("AppointmentHandlers")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_AppointmentHandler_Appointment");

                    b.HasOne("Serve.API.Models.OrganizationEmployee", "Employee")
                        .WithMany("AppointmentHandlers")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_AppointmentHandler_OrganizationEmployee");

                    b.Navigation("Appointment");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Serve.API.Models.AppointmentProduct", b =>
                {
                    b.HasOne("Serve.API.Models.Product", "Product")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_AppointmentProduct_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Serve.API.Models.AppointmentService", b =>
                {
                    b.HasOne("Serve.API.Models.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__ServicePr__AppId__36B12243");

                    b.HasOne("Serve.API.Models.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__ServicePr__Servi__35BCFE0A");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Serve.API.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Serve.API.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Serve.API.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Serve.API.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Serve.API.Models.EmployeePermission", b =>
                {
                    b.HasOne("Serve.API.Models.Organization", "Organization")
                        .WithMany("EmployeePermissions")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeePermission_Organization");

                    b.HasOne("Serve.API.Models.EmployeeRole", "Role")
                        .WithMany("EmployeePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EmployeePermission_OrganizationEmployeeRole");

                    b.Navigation("Organization");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Serve.API.Models.EmployeeRole", b =>
                {
                    b.HasOne("Serve.API.Models.OrganizationEmployee", "OrganizationEmployee")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("OrganizationEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationEmployeeRole_OrganizationEmployee");

                    b.HasOne("Serve.API.Models.Organization", "Organization")
                        .WithMany("EmployeeRoles")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationEmployeeRole_Organization");

                    b.Navigation("Organization");

                    b.Navigation("OrganizationEmployee");
                });

            modelBuilder.Entity("Serve.API.Models.EmployeeUnavailableDate", b =>
                {
                    b.HasOne("Serve.API.Models.OrganizationEmployee", "Employee")
                        .WithMany("EmployeeUnavailableDates")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeUnavailableDate_OrganizationEmployee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Serve.API.Models.Event", b =>
                {
                    b.HasOne("Serve.API.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("FK_Event_EventType");

                    b.HasOne("Serve.API.Models.Reminder", "Reminder")
                        .WithMany("Events")
                        .HasForeignKey("ReminderId")
                        .HasConstraintName("FK_Event_Reminder");

                    b.Navigation("EventType");

                    b.Navigation("Reminder");
                });

            modelBuilder.Entity("Serve.API.Models.Notification", b =>
                {
                    b.HasOne("Serve.API.Models.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_Notifications_Appointment");

                    b.HasOne("Serve.API.Models.OrganizationEmployee", "Employee")
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Notifications_OrganizationEmployee");

                    b.HasOne("Serve.API.Models.Organization", "Organization")
                        .WithMany("Notifications")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Notifications_Organization");

                    b.HasOne("Serve.API.Models.Reminder", "Reminder")
                        .WithMany("Notifications")
                        .HasForeignKey("ReminderId")
                        .HasConstraintName("FK_Notifications_Reminder");

                    b.Navigation("Appointment");

                    b.Navigation("Employee");

                    b.Navigation("Organization");

                    b.Navigation("Reminder");
                });

            modelBuilder.Entity("Serve.API.Models.Organization", b =>
                {
                    b.HasOne("Serve.API.Models.UserProfile", "CreatorNavigation")
                        .WithMany("Organizations")
                        .HasForeignKey("Creator")
                        .HasConstraintName("FK_Organization_UserProfile");

                    b.Navigation("CreatorNavigation");
                });

            modelBuilder.Entity("Serve.API.Models.OrganizationEmployee", b =>
                {
                    b.HasOne("Serve.API.Models.Organization", "Organization")
                        .WithMany("OrganizationEmployees")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_OrganizationEmployee_Organization");

                    b.HasOne("Serve.API.Models.EmployeePermission", "Permission")
                        .WithMany("OrganizationEmployees")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationEmployee_EmployeePermission");

                    b.HasOne("Serve.API.Models.UserProfile", "Profile")
                        .WithMany("OrganizationEmployees")
                        .HasForeignKey("ProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationEmployee_UserProfile");

                    b.HasOne("Serve.API.Models.EmployeeRole", "Role")
                        .WithMany("OrganizationEmployees")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_OrganizationEmployee_EmployeeRole");

                    b.Navigation("Organization");

                    b.Navigation("Permission");

                    b.Navigation("Profile");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Serve.API.Models.OrganizationMedium", b =>
                {
                    b.HasOne("Serve.API.Models.Organization", "Organization")
                        .WithMany("OrganizationMedia")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_OrganizationMedia_Organization");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serve.API.Models.OrganizationUnavailableDate", b =>
                {
                    b.HasOne("Serve.API.Models.Organization", "Organization")
                        .WithMany("OrganizationUnavailableDates")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_OrganizationUnavailableDate_Organization");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serve.API.Models.Product", b =>
                {
                    b.HasOne("Serve.API.Models.Appointment", "Appointment")
                        .WithMany("Products")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_Product_Appointment");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Serve.API.Models.Reminder", b =>
                {
                    b.HasOne("Serve.API.Models.Event", "Event")
                        .WithMany("Reminders")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Reminder_Event");

                    b.HasOne("Serve.API.Models.ReminderStatus", "ReminderStatus")
                        .WithMany("Reminders")
                        .HasForeignKey("ReminderStatusId")
                        .HasConstraintName("FK_Reminder_ReminderStatus");

                    b.HasOne("Serve.API.Models.ReminderType", "ReminderTypeNavigation")
                        .WithMany("Reminders")
                        .HasForeignKey("ReminderType")
                        .HasConstraintName("FK_Reminder_ReminderType");

                    b.Navigation("Event");

                    b.Navigation("ReminderStatus");

                    b.Navigation("ReminderTypeNavigation");
                });

            modelBuilder.Entity("Serve.API.Models.Timesheet", b =>
                {
                    b.HasOne("Serve.API.Models.Task", "Task")
                        .WithMany("Timesheets")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK_Timesheet_Task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Serve.API.Models.User", b =>
                {
                    b.HasOne("Serve.API.Models.Customer", "Customer")
                        .WithMany("Users")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustId");

                    b.HasOne("Serve.API.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrgId");

                    b.Navigation("Customer");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Serve.API.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentHandlers");

                    b.Navigation("AppointmentServices");

                    b.Navigation("Notifications");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Serve.API.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("Serve.API.Models.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Serve.API.Models.EmployeePermission", b =>
                {
                    b.Navigation("OrganizationEmployees");
                });

            modelBuilder.Entity("Serve.API.Models.EmployeeRole", b =>
                {
                    b.Navigation("EmployeePermissions");

                    b.Navigation("OrganizationEmployees");
                });

            modelBuilder.Entity("Serve.API.Models.Event", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Serve.API.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Serve.API.Models.Organization", b =>
                {
                    b.Navigation("EmployeePermissions");

                    b.Navigation("EmployeeRoles");

                    b.Navigation("Notifications");

                    b.Navigation("OrganizationEmployees");

                    b.Navigation("OrganizationMedia");

                    b.Navigation("OrganizationUnavailableDates");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Serve.API.Models.OrganizationEmployee", b =>
                {
                    b.Navigation("AppointmentHandlers");

                    b.Navigation("EmployeeRoles");

                    b.Navigation("EmployeeUnavailableDates");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Serve.API.Models.Product", b =>
                {
                    b.Navigation("AppointmentProducts");
                });

            modelBuilder.Entity("Serve.API.Models.Reminder", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Serve.API.Models.ReminderStatus", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Serve.API.Models.ReminderType", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Serve.API.Models.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Serve.API.Models.Task", b =>
                {
                    b.Navigation("Timesheets");
                });

            modelBuilder.Entity("Serve.API.Models.UserProfile", b =>
                {
                    b.Navigation("OrganizationEmployees");

                    b.Navigation("Organizations");
                });
#pragma warning restore 612, 618
        }
    }
}
